// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioAPI.Core.DataContexts;

#nullable disable

namespace PortfolioAPI.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20240215163648_AddTables")]
    partial class AddTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(2019, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IdeaIT S.r.l.",
                            Start = new DateTime(2019, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ready2Use S.r.l.",
                            Start = new DateTime(2020, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Description = "Realizzazione e implementazione tema custom compatibile con il software Elementor, manutenzione generale sui contenuti e sulla sicurezza",
                            End = new DateTime(2019, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Realizzazione Sito Wordpress ShareLock",
                            Start = new DateTime(2019, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            Description = "Ricostruzione dell'intero ambiente da zero con moduli custom, implementazione di funzionalità di WorkFlow, configurazione per il corretto utilizzo delle cartelle di posta essoteriche Exchange e riadattamenti vari per consentire la corretta comunicazione con il Database SQL Server",
                            End = new DateTime(2021, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Realizzazione Gestionale SuiteCRM",
                            Start = new DateTime(2021, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            Description = "Portale con frontend in Vue.js che offre ai suoi utenti dei grafici sull'andamento delle attività e turni lavorativi",
                            End = new DateTime(2021, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Realizzazione Applicativo Tableau De Bord",
                            Start = new DateTime(2020, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            Description = "Portale con frontend in Vue.js che offre ai suoi utenti un'interfaccia per consultare le novità e un classico CRUD amministrativo per la gestione dei contenuti",
                            End = new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Realizzazione Applicativo Bacheca",
                            Start = new DateTime(2020, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("technologies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Laravel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wordpress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drupal"
                        },
                        new
                        {
                            Id = 5,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 7,
                            Name = "C++"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 9,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 10,
                            Name = "React"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Vue"
                        },
                        new
                        {
                            Id = 13,
                            Name = "SQL Server"
                        },
                        new
                        {
                            Id = 14,
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = 16,
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Redis"
                        },
                        new
                        {
                            Id = 19,
                            Name = "RabbitMQ"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Docker"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = 22,
                            Name = "AWS"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Azure"
                        },
                        new
                        {
                            Id = 26,
                            Name = "SVN"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Jira"
                        },
                        new
                        {
                            Id = 29,
                            Name = "C"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Ionic"
                        },
                        new
                        {
                            Id = 31,
                            Name = "SAP"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Typescript"
                        },
                        new
                        {
                            Id = 33,
                            Name = "NextCloud"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Material"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Tailwind"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Bootstrap"
                        },
                        new
                        {
                            Id = 37,
                            Name = "SASS"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Syncfusion"
                        },
                        new
                        {
                            Id = 39,
                            Name = "PrimeNG"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Leaflet.js"
                        },
                        new
                        {
                            Id = 41,
                            Name = "OpenStreetMap"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Google Maps"
                        },
                        new
                        {
                            Id = 43,
                            Name = "SAML"
                        },
                        new
                        {
                            Id = 44,
                            Name = "LDAP"
                        },
                        new
                        {
                            Id = 45,
                            Name = "SuiteCRM"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Websockets"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Three.js"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Electron"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Cordova"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Capacitor"
                        });
                });

            modelBuilder.Entity("ProjectTechnology", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologiesId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "TechnologiesId");

                    b.HasIndex("TechnologiesId");

                    b.ToTable("ProjectTechnology");

                    b.HasData(
                        new
                        {
                            ProjectsId = 1,
                            TechnologiesId = 1
                        });
                });

            modelBuilder.Entity("PortfolioAPI.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "36bacc5b-3d3b-436d-b812-3f82e9ee8ec8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "97991e44-20d0-492d-b2ed-96077eb37d3b",
                            Name = "Editor",
                            NormalizedName = "Editor"
                        },
                        new
                        {
                            Id = "41a4afa6-487e-4617-8207-0ba8dd18bc7b",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "b8d5bf7d-923a-4d01-8410-27f4686570ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ff33c40-20ce-4a9a-8136-51cc5c7ced40",
                            Email = "emma.stone@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddc0bc2e-b515-4243-870c-ba0291eb02c4",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            FirstName = "Emma",
                            LastName = "Stone"
                        },
                        new
                        {
                            Id = "d9991ed2-9aeb-469c-8cbd-c6a98190529f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71d979b7-acad-4cf1-8f50-7df87ee2a951",
                            Email = "liam.smith@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d442708c-7719-4667-b9ad-141ac8a4a22b",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            FirstName = "Liam",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = "8a6b051b-bca4-4c46-aa98-e5b0d960a7f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08d1564a-eb49-4042-8fa9-c3e213ffe791",
                            Email = "olivia.jones@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bdc1ad9-6a9a-42cf-9636-59539230d113",
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            FirstName = "Olivia",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = "7f32a8f6-d961-431f-82f8-0034a26e26ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2bff8dc4-e2bb-49a1-9a21-736300d7036d",
                            Email = "noah.brown@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "183ae1c5-8be6-41f6-b4c4-ac8946e60ab1",
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            FirstName = "Noah",
                            LastName = "Brown"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.Company", b =>
                {
                    b.HasOne("PortfolioAPI.Core.Models.User", null)
                        .WithMany("Companies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.Project", b =>
                {
                    b.HasOne("PortfolioAPI.Core.Models.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProjectTechnology", b =>
                {
                    b.HasOne("PortfolioAPI.Core.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAPI.Core.Models.Technology", null)
                        .WithMany()
                        .HasForeignKey("TechnologiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.User", b =>
                {
                    b.HasOne("PortfolioAPI.Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.Company", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PortfolioAPI.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PortfolioAPI.Core.Models.User", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
